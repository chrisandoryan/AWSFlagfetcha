AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS CloudFormation template for Flagtake deployment.
Parameters:
  EnvironmentName:
    Type: String
    Default: flag_fetcher_api
    Description: "A friendly environment name that will be used for namespacing all cluster resources."
  PrivateDNSNamespaceName:
    Type: String
    Default: flag_fetcher_dns
    Description: "The private DNS name that identifies the name that you want to use to locate your resources."
  FlagServerHost:
    Type: String
    Default: https://api.jsonbin.io/v3/qs/652140670574da7622b5a348
    Description: "The URL of host server that will emit the CTF flag upon request."
Resources:
  # API Gateway Establishment. 
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref EnvironmentName
      FailOnWarnings: 'true'
  RestApiUserFlagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
      PathPart: user_flag
  RestApiRootFlagResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi
      PathPart: root_flag
  RestApiUserFlagMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      ResourceId: !Ref RestApiRootFlagResource
      RestApiId: !Ref RestApi
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !Sub ${FlagServerHost}/user_flag
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: !Ref FlagModel
  RestApiRootFlagMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      ResourceId: !Ref RestApiUserFlagResource
      RestApiId: !Ref RestApi
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP
        Uri: !Sub ${FlagServerHost}/root_flag
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: !Ref FlagModel
  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - RestApiUserFlagMethod
      - RestApiRootFlagMethod
    Properties:
      RestApiId: !Ref RestApi
      Description: Deployment of Flagtake.
  RestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: stable
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment
      Description: Stage marked as stable for Flagtake deployment.
  FlagModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: FlagModel
      RestApiId: !Ref RestApi
      Schema:
        "$schema": http://json-schema.org/draft-04/schema#
        title: Flag
        type: object
        additionalProperties: false
        properties:
          flag:
            type: string
          type:
            type: string
          generated_at:
            type: string
        required:
          - flag
          - type
          - generated_at

  # IAM and Policy Establishment.
  CTFUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CTFUserRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CTFUserGetFlagThroughAPIGateway
    DependsOn: "CTFUserGetFlagThroughAPIGateway"
  CTFRootRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CTFRootRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref CTFRootGetFlagThroughAPIGateway
    DependsOn: "CTFRootGetFlagThroughAPIGateway"
  CTFUserGetFlagThroughAPIGateway:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CTFUserGetFlagThroughAPIGateway
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - execute-api:Invoke
              # - apigateway:*
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/user_flag
  CTFRootGetFlagThroughAPIGateway:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CTFRootGetFlagThroughAPIGateway
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - execute-api:Invoke
              # - apigateway:*
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/root_flag
  
  # CTF users creation
  CTFUser:
    Type: AWS::IAM::User
    Properties:
      UserName: CTFUser
      ManagedPolicyArns:
        - !Ref CTFUserGetFlagThroughAPIGateway
  CTFRoot:
    Type: AWS::IAM::User
    Properties:
      UserName: CTFRoot
      ManagedPolicyArns:
        - !Ref CTFRootGetFlagThroughAPIGateway
  CTFUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CTFUser
  CTFRootAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CTFRoot





